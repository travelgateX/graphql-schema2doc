{"default":"## GraphQL schema definition\r\n\r\n{{% graphql-schema-type %}}\r\n\r\n## Fields\r\n\r\n{{% graphql-field %}}\r\n\r\n{{% graphql-require-by %}}\r\n","enums":"{\r\n  \"title\": \"Enums\",\r\n  \"pagetitle\": null,\r\n  \"description\": \"\",\r\n  \"weight\": 6,\r\n  \"icon\": null,\r\n  \"alwaysopen\": false\r\n}\r\nEnums are a particular type of `Scalar` that works like a drop-down, single selection menu. Each type of `Enum` has a number of choices defined, and users must select one of the choices when querying the `Enum`.\r\n\r\nFor example, you could make a `Query` asking for only hotels with a particular penalty cancellation policy (`enum CancelPentaltyType`). You then choose whether to see hotels with either a ‘nights’, ‘percent’ or ‘import’ penalty type.\r\n\r\nEach `Enum` is described in the same way:\r\n- A short definition of the `Enum`\r\n- An interactive GraphQL schema definition which shows the full list of possible options for the `Enum`\r\n- A list of which objects require this `Enum` to be used\r\n- Where possible, we are adding examples of how to use this object in your queries.\r\n\r\n{{% alert theme=\"info\" %}}You can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\r\n","interfaces":"{\r\n  \"title\": \"Interfaces\",\r\n  \"pagetitle\": null,\r\n  \"description\": \"\",\r\n  \"weight\": 4,\r\n  \"icon\": null,\r\n  \"alwaysopen\": false\r\n}\r\nInterfaces are an abstract type that includes a certain set of fields that are grouped together. For example, our `AdviseMessage` interface requires the error code, error type and error description fields to be used together.\r\n\r\nEach `Interface` is described in the same way:\r\n- A short definition of the `Interface`\r\n- An interactive GraphQL schema definition\r\n- A list of all of the fields that are included in this `Interface` (remember, in GraphQL, ‘!’ indicates mandatory fields. Some interfaces have all fields mandatory and some have a mix of mandatory and optional fields)\r\n- Where possible, we are adding examples of how to use this object in your queries.\r\n\r\n{{% alert theme=\"info\" %}}You can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\r\n","objects":"{\r\n  \"title\": \"Objects\",\r\n  \"pagetitle\": null,\r\n  \"description\": \"\",\r\n  \"weight\": 2,\r\n  \"icon\": null,\r\n  \"alwaysopen\": false\r\n}\r\nOur `Object` pages describe every single resource, and field in our schema.\r\n\r\nYou can access our `Schema` interactively in our [API Playground](https://api.travelgatex.com), but if you would like to understand each object’s properties, have a look at the relevant page here.\r\n\r\nEach object is described in the same way:\r\n- A short definition of the `Object`\r\n- An interactive GraphQL schema definition\r\n- A full list of all `Fields` in the object\r\n- A list of which other objects require this `Object`\r\n- Where possible, we are adding examples of how to use this `Object` in your queries.\r\n\r\n{{% alert theme=\"info\" %}}You can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\r\n","reference":"+++\r\n  title: \"Reference\",\r\n  pagetitle: \"Reference Documentation\",\r\n  description: \"Reference Documentation\",\r\n  weight: 2,\r\n  icon: \"fa-book\",\r\n  alwaysopen: false\r\n+++\r\nOur reference pages explain all aspects of our GraphQL schema.\r\n\r\nThese pages are divided into the following sections:\r\n\r\n**Schema**: Explains how our Schema works and the two key operations: Queries and Mutations\r\n\r\n**Objects**: A complete list of all objects in our schema, their definitions, what fields they use and when they are mandatory.\r\n\r\n{{% alert theme=\"info\" %}}We are currently building out examples for every `Object` page. Please send us a **Pull request** if you would like to see an example for a particular `Object`, or if you would like to share your own example with the TravelgateX community.{{% /alert %}}\r\n\r\n**Scalars**: A complete list of the types of objects that are available in our schema (such as `String` or `Integer`). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\r\n\r\n**Interfaces**: An abstract type that includes a certain set of fields that a type must include. For example, our `AdviseMessage` interface requires the error code, error type and error description fields to be used together.  \r\n\r\n**Input Objects**: Similar to an `Interface`, this is an abstract type that includes a set of fields that can be used together when making a query. For example our `HotelCriteriaSearchInput` lists which fields must be completed to filter search results for a hotel booking. In this case, it is mandatory to include checkin and checkout dates, the number of hotel options you want to receive, and the number of rooms you need. There are also non-mandatory fields that can be included such as currency for prices, and the nationality of traveler.\r\n\r\n**Enums**: These are a particular type of scalar that works like a drop-down, single selection menu. Each type of `Enum` has a number of choices defined, and users must select one of the choices when querying the Enum. For example, you could make a `Query` asking for only hotels with a particular penalty cancellation policy (`enum CancelPentaltyType`). You then choose whether to see hotels with either a `Nights`, `Percent` or `Import` penalty type.\r\n\r\n{{% alert theme=\"info\" %}}You can also see our `Schema` in action by using our <a href=\"https://api.travelgatex.com/\">API Playground</a>. You can create sample queries and the `Schema` will autocomplete with available fields.{{% /alert %}}\r\n\r\n{% alert theme=\"info\" %}}In GraphQL, `!` indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our <a href=\"https://docs.travelgatex.com/learning-graphql/\">Learning GraphQL guides</a>.{{% /alert %}}\r\n\r\n{{% alert theme=\"warning\" %}}Keep in mind that it's important to use the correct Headers.\r\nIf you wish to use test headers, insert `\"Authorization\":\"Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\"`\r\n{{% /alert %}}\r\n","scalars":"{\r\n  \"title\": \"Scalars\",\r\n  \"pagetitle\": null,\r\n  \"description\": \"\",\r\n  \"weight\": 3,\r\n  \"icon\": null,\r\n  \"alwaysopen\": false\r\n}\r\nScalars are _types_ of objects that are available in our schema (such as `String` or `Integer`). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\r\n\r\nEach `Scalar` is described in the same way:\r\n- A short definition of the `Scalar`\r\n- An interactive GraphQL schema definition\r\n- A list of which objects require this `Scalar`\r\n- Where possible, we are adding examples of how to use this object in your queries.\r\n\r\n{{% alert theme=\"info\" %}}You can update any page of our documentation by clicking on ‘Edit page’ and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours.{% /alert %}}\r\n"}